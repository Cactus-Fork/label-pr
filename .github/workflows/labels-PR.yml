on:
  pull_request:
    types: [opened, synchronize]
name: Labels PR
jobs:
  label:
    name: Label PR
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Git
        run: |
          sudo apt-get update
          sudo apt-get install git -y
      - name: Install jq
        run: sudo apt-get install -y jq
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyGithub
      - name: Calculate Lines Changed
        id: lines
        run: |
          import os
          from github import Github, context
          def get_commit_lines(commit):
              command = ['git', 'diff', '--shortstat', commit]
              output = subprocess.check_output(command).decode('utf-8').strip()
              parts = output.split()
              added = int(parts[1])
              deleted = int(parts[3])
              return added - deleted

          def get_total_lines(pr):
              commits = pr.get_commits()
              lines = sum(get_commit_lines(commit.sha) for commit in commits)
              return lines

          g = Github(os.getenv('GITHUB_TOKEN'))
          pr_number = context.payload.pull_request.number
          repo = g.get_repo(context.repo.owner + '/' + context.repo.repo)
          pr = repo.get_pull(pr_number)

          total_lines_changed = get_total_lines(pr)
          print(f'Total lines changed: {total_lines_changed}')
          print(f'::set-output name=lines_changed::{total_lines_changed}')
      - name: Get Labels
        id: get_labels
        run: |
          labels=$(jq ". | keys | .[]" labels.json)
          for label in $labels; do
              threshold=$(jq -r ".[\"$label\"].threshold" labels.json)
              color=$(jq -r ".[\"$label\"].color" labels.json)
              if [ $threshold -le ${{ steps.lines.outputs.lines_changed }} ]; then
                  echo "{\"name\":\"$label\", \"color\":\"$color\"}"
              fi
          done
          echo "::set-output name=labels::$labels"
      - name: Add Labels
        uses: andrewmcodes/labeler@master
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LABELS: ${{ steps.get_labels.outputs.labels }}
          CONFIG_PATH: ''
